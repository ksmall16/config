WORKSPACE=~/Desktop/Workspace
AUTUMN=$WORKSPACE/autumn

alias workspace='echo "Switching to ~/Desktop/Workspace..." && cd $WORKSPACE'

# autumn project locations
alias autumn='cd $AUTUMN'
alias employerService='cd $AUTUMN/employer-service'
alias productService='cd $AUTUMN/product-service'
alias employerPlugin='cd $AUTUMN/s1n-employer-plugin'
alias absenceDomain='cd $AUTUMN/absence-domain'
alias bff='cd $AUTUMN/autumn-bff'

# files & directories
alias elasticmq='cd /Users/n0290338/Desktop/Workspace && java -jar elasticmq-server-0.13.8.jar'
alias refreshaws='cd /Users/n0290338/Downloads/aws-saml-api-keys-2.0-45 && ./apikeyretriever_darwin_amd64 && cat ~/.aws/credentials'
alias getaws='cat ~/.aws/credentials'

# Local proxy address defined in SquidMan
LOCAL_PROXY_ADDR=http://localhost:3128
# --- ProxyOff ----
# Turn off proxy settings for Squidman.
proxyOff() {
  echo 'Setting up proxyless env...'
  git config --global --unset http.proxy
  git config --global --unset https.proxy
  npm config rm proxy
  npm config rm https-proxy
  npm config rm strict-ssl
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset ALL_PROXY
  unset http_proxy
  unset https_proxy
  unset all_proxy
  unset no_proxy
  echo '' > ~/.curlrc
  echo '' > ~/.wgetrc
  sudo networksetup -setautoproxystate "Wi-Fi" off


  # Detects all network hardware & creates services for all installed network hardware
  /usr/sbin/networksetup -detectnewhardware

  IFS=$'\n'

  #Loops through the list of network services
  for i in $(/usr/sbin/networksetup -listallnetworkservices | tail +2 );

    do

      # Turn off auto proxy
      /usr/sbin/networksetup -setautoproxystate "$i" off
      echo "Turned off auto proxy for interface $i"

    done

  unset IFS

  echo "Auto proxy for all interfaces turned off"

  # Stop Squidmand and quit the app.
  osascript -e 'tell application "System Events" to tell application process "SquidMan"
      click (every button of window 1 whose title is "Stop Squid")
    end tell
    delay 3
    tell application "SquidMan"
      quit
    end tell'

}

# --- ProxyOn ---
# Turn on proxy settings for Squidman.

proxyOn() {
  # HARDCODED VALUES ARE SET HERE
  autoProxyURL="http://pac.lfg.com/pac"

  echo 'Setting up proxy env...'
  sudo networksetup -setautoproxyurl "Wi-Fi" $autoProxyURL
  export HTTP_PROXY=$LOCAL_PROXY_ADDR
  export HTTPS_PROXY=$LOCAL_PROXY_ADDR
  export ALL_PROXY=$LOCAL_PROXY_ADDR
  export http_proxy=$LOCAL_PROXY_ADDR
  export https_proxy=$LOCAL_PROXY_ADDR
  export all_proxy=$LOCAL_PROXY_ADDR
  export no_proxy=localhost,127.0.0.0,127.0.1.1
  echo 'proxy='$LOCAL_PROXY_ADDR > ~/.curlrc
  echo 'use_proxy=yes' > ~/.wgetrc
  echo 'http_proxy='$LOCAL_PROXY_ADDR >> ~/.wgetrc
  echo 'https_proxy='$LOCAL_PROXY_ADDR >> ~/.wgetrc
  git config --global http.proxy $LOCAL_PROXY_ADDR
  git config --global https.proxy $LOCAL_PROXY_ADDR
  npm config set proxy $LOCAL_PROXY_ADDR
  npm config set https-proxy $LOCAL_PROXY_ADDR
  npm config set strict-ssl false
  sudo networksetup -setautoproxystate "Wi-Fi" on
  # Open SquidMan
  open -a SquidMan


  # CHECK TO SEE IF A VALUE WAS PASSED FOR $4, AND IF SO, ASSIGN IT
  if [ "$4" != "" ] && [ "$autoProxyURL" == "" ]; then
  autoProxyURL=$4
  fi

  # Detects all network hardware & creates services for all installed network hardware
  /usr/sbin/networksetup -detectnewhardware

  IFS=$'\n'

          #Loops through the list of network services
          for i in $(networksetup -listallnetworkservices | tail +2 );
          do

                  # Get a list of all services
                  autoProxyURLLocal=`/usr/sbin/networksetup -getautoproxyurl "$i" | head -1 | cut -c 6-`

                  # Echo's the name of any matching services & the autoproxyURL's set
                  echo "$i Proxy set to $autoProxyURLLocal"

                  # If the value returned of $autoProxyURLLocal does not match the value of $autoProxyURL for the interface $i, change it.
                  if [[ $autoProxyURLLocal != $autoProxyURL ]]; then
                          /usr/sbin/networksetup -setautoproxyurl $i $autoProxyURL
                          echo "Set auto proxy for $i to $autoProxyURL"
                  fi

                  # Enable auto proxy once set
                  /usr/sbin/networksetup -setautoproxystate "$i" on
                  echo "Turned on auto proxy for $i"

          done

  unset IFS

  # Echo that we're done
  echo "Auto proxy present, correct & enabled for all interfaces"

  # Start Squidman app and click the button to turn it on. Requires extra accessibility permissions in the Mac OS.
  osascript -e 'activate application "SquidMan"
    delay 1
    tell application "System Events" to tell application process "SquidMan"
      click (every button of window 1 whose title is "Start Squid")
    end tell'
}

# Used to set the env variables if you start a new terminal session such as an iTerm tab.
proxySet() {
  export HTTP_PROXY=$LOCAL_PROXY_ADDR
  export HTTPS_PROXY=$LOCAL_PROXY_ADDR
  export ALL_PROXY=$LOCAL_PROXY_ADDR
  export http_proxy=$LOCAL_PROXY_ADDR
  export https_proxy=$LOCAL_PROXY_ADDR
  export all_proxy=$LOCAL_PROXY_ADDR
  export no_proxy=localhost,127.0.0.0,127.0.1.1
}
